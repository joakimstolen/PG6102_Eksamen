<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>com.example</groupId>
	<artifactId>eksamen</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<modules>
		<module>utils</module>
		<module>auth</module>
        <module>api-gateway</module>
        <module>trip-dto</module>
        <module>trip</module>
		<module>user-collections</module>
        <module>e2e-tests</module>
    </modules>
	<name>eksamen</name>
	<description>Eksamen PG6102 Enterprise Programmering 2</description>
	<packaging>pom</packaging>

	<properties>
		<version.kotlin>1.3.72</version.kotlin>
		<kotlin.compiler.incremental>true</kotlin.compiler.incremental>

		<version.java>11</version.java>
		<version.springboot>2.2.8.RELEASE</version.springboot>
		<version.springcloud>Hoxton.RELEASE</version.springcloud>
		<version.junit>5.6.2</version.junit>
		<version.junit.platform>1.5.2</version.junit.platform>
		<version.jacoco>0.8.5</version.jacoco>
		<!--  FIXME version 1.4.200 breaks tests, eg in JPA-JPQL  -->
		<version.h2>1.4.197</version.h2>
		<version.postgres>42.1.4</version.postgres>
		<version.testcontainers>1.12.4</version.testcontainers>
		<version.restassured>4.2.0</version.restassured>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>

		<version.surefire-failsafe>3.0.0-M4</version.surefire-failsafe>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.jetbrains.kotlin</groupId>
			<artifactId>kotlin-stdlib-jdk8</artifactId>
		</dependency>

		<dependency>

			<groupId>org.jetbrains.kotlin</groupId>
			<artifactId>kotlin-reflect</artifactId>
		</dependency>
	</dependencies>

	<dependencyManagement>

		<dependencies>
			<!-- SpringBoot BOM -->
			<dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-starter-parent</artifactId>
				<version>${version.springboot}</version>
				<scope>import</scope>
				<type>pom</type>
			</dependency>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>${version.springcloud}</version>
				<scope>import</scope>
				<type>pom</type>
			</dependency>


			<dependency>
				<groupId>org.postgresql</groupId>
				<artifactId>postgresql</artifactId>
				<version>${version.postgres}</version>
			</dependency>

			<dependency>
				<groupId>javax.xml.bind</groupId>
				<artifactId>jaxb-api</artifactId>
				<version>2.3.1</version>
			</dependency>

			<dependency>
				<groupId>org.glassfish.jaxb</groupId>
				<artifactId>jaxb-runtime</artifactId>
				<version>2.3.1</version>
			</dependency>

			<dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-starter-test</artifactId>
				<version>${version.springboot}</version>
				<scope>test</scope>
				<!-- Exclude JUnit 4, which is added by default-->
				<exclusions>
					<exclusion>
						<groupId>junit</groupId>
						<artifactId>junit</artifactId>
					</exclusion>
					<exclusion>
						<groupId>org.junit.vintage</groupId>
						<artifactId>junit-vintage-engine</artifactId>
					</exclusion>
				</exclusions>
			</dependency>



			<dependency>
				<groupId>com.h2database</groupId>
				<artifactId>h2</artifactId>
				<version>${version.h2}</version>
			</dependency>

			<!-- depencendy for exercise part two.-->
			<dependency>
				<groupId>io.springfox</groupId>
				<artifactId>springfox-boot-starter</artifactId>
				<version>3.0.0</version>
			</dependency>

			<dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-starter-web</artifactId>
				<version>${version.springboot}</version>
			</dependency>

			<dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-starter-validation</artifactId>
				<version>${version.springboot}</version>
			</dependency>


			<dependency>
				<!-- For handling waiting of asynchronous events -->
				<groupId>org.awaitility</groupId>
				<artifactId>awaitility</artifactId>
				<version>4.0.3</version>
				<scope>test</scope>
			</dependency>

			<dependency>
				<!-- To support JUnit 5  -->
				<groupId>org.testcontainers</groupId>
				<artifactId>junit-jupiter</artifactId>
				<version>${version.testcontainers}</version>
				<scope>test</scope>
			</dependency>

			<dependency>
				<!-- To use Docker from tests -->
				<groupId>org.testcontainers</groupId>
				<artifactId>testcontainers</artifactId>
				<version>${version.testcontainers}</version>
				<scope>test</scope>
			</dependency>

			<dependency>
				<groupId>io.rest-assured</groupId>
				<artifactId>rest-assured</artifactId>
				<version>${version.restassured}</version>
				<scope>test</scope>
			</dependency>
			<dependency>
				<groupId>io.rest-assured</groupId>
				<artifactId>json-path</artifactId>
				<version>${version.restassured}</version>
				<scope>test</scope>
			</dependency>
			<dependency>
				<groupId>io.rest-assured</groupId>
				<artifactId>xml-path</artifactId>
				<version>${version.restassured}</version>
				<scope>test</scope>
			</dependency>

			<dependency>
				<groupId>org.flywaydb</groupId>
				<artifactId>flyway-core</artifactId>
				<version>6.0.8</version>
			</dependency>

			<!-- Kotlin dependencies -->
			<dependency>
				<groupId>org.jetbrains.kotlin</groupId>
				<artifactId>kotlin-stdlib</artifactId>
				<version>${version.kotlin}</version>
			</dependency>
			<dependency>
				<groupId>org.jetbrains.kotlin</groupId>
				<artifactId>kotlin-stdlib-jdk8</artifactId>
				<version>${version.kotlin}</version>
			</dependency>
			<dependency>
				<groupId>org.jetbrains.kotlin</groupId>
				<artifactId>kotlin-reflect</artifactId>
				<version>${version.kotlin}</version>
			</dependency>

			<dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-starter-data-jpa</artifactId>
				<version>2.2.8.RELEASE</version>
			</dependency>

			<dependency>
				<groupId>org.junit.jupiter</groupId>
				<artifactId>junit-jupiter</artifactId>
				<version>5.6.2</version>
				<scope>test</scope>
			</dependency>


			<!-- region Code Coverage -->
			<dependency>
				<groupId>org.jacoco</groupId>
				<artifactId>org.jacoco.core</artifactId>
				<version>${version.jacoco}</version>
				<scope>test</scope>
			</dependency>

			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-starter-circuitbreaker-resilience4j</artifactId>
				<version>1.0.0.RELEASE</version>
			</dependency>

			<dependency>
				<!-- to mock web services -->
				<groupId>com.github.tomakehurst</groupId>
				<artifactId>wiremock-standalone</artifactId>
				<version>2.27.1</version>
				<scope>test</scope>
			</dependency>

		</dependencies>
	</dependencyManagement>


	<build>
		<plugins>

			<plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
			</plugin>


			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>

			</plugin>

			<plugin>
				<artifactId>kotlin-maven-plugin</artifactId>
				<groupId>org.jetbrains.kotlin</groupId>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-failsafe-plugin</artifactId>
			</plugin>
		</plugins>

		<pluginManagement>
			<plugins>
				<plugin>
					<!-- see https://kotlinlang.org/docs/reference/using-maven.html -->
					<artifactId>kotlin-maven-plugin</artifactId>
					<groupId>org.jetbrains.kotlin</groupId>
					<version>${version.kotlin}</version>
					<!--
                        Kotlin has a major "limitation" that all classes are final by default.
                        Someone call it a "feature", others (like me) call it a "design flaw".
                        See more at: https://discuss.kotlinlang.org/t/classes-final-by-default/166/77

                        Why is it a problem? for example, it does not play well with all major frameworks
                        out there like JPA, Spring, mocking, etc, as they require to create proxy
                        classes that extend the classes you write.
                        So here we have to use special plugins to bypass this Kotlin "feature"...
                    -->
					<configuration>
						<jvmTarget>${version.java}</jvmTarget>
						<compilerPlugins>
							<plugin>spring</plugin>
							<plugin>jpa</plugin>
						</compilerPlugins>
					</configuration>
					<dependencies>
						<dependency>
							<groupId>org.jetbrains.kotlin</groupId>
							<artifactId>kotlin-maven-allopen</artifactId>
							<version>${version.kotlin}</version>
						</dependency>
						<dependency>
							<groupId>org.jetbrains.kotlin</groupId>
							<artifactId>kotlin-maven-noarg</artifactId>
							<version>${version.kotlin}</version>
						</dependency>
					</dependencies>
					<executions>
						<execution>
							<id>compile</id>
							<phase>compile</phase>
							<goals>
								<goal>compile</goal>
							</goals>
							<configuration>
								<sourceDirs>
									<sourceDir>${project.basedir}/src/main/kotlin</sourceDir>
									<sourceDir>${project.basedir}/src/main/java</sourceDir>
								</sourceDirs>
							</configuration>
						</execution>
						<execution>
							<id>test-compile</id>
							<goals>
								<goal>test-compile</goal>
							</goals>
							<configuration>
								<sourceDirs>
									<sourceDir>${project.basedir}/src/test/kotlin</sourceDir>
									<sourceDir>${project.basedir}/src/test/java</sourceDir>
								</sourceDirs>
							</configuration>
						</execution>
					</executions>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-compiler-plugin</artifactId>
					<version>3.8.1</version>
					<executions>
						<!-- Replacing default-compile as it is treated specially by maven -->
						<execution>
							<id>default-compile</id>
							<phase>none</phase>
						</execution>
						<!-- Replacing default-testCompile as it is treated specially by maven -->
						<execution>
							<id>default-testCompile</id>
							<phase>none</phase>
						</execution>
						<execution>
							<id>java-compile</id>
							<phase>compile</phase>
							<goals>
								<goal>compile</goal>
							</goals>
						</execution>
						<execution>
							<id>java-test-compile</id>
							<phase>test-compile</phase>
							<goals>
								<goal>testCompile</goal>
							</goals>
						</execution>
					</executions>
				</plugin>

				<!-- Built-in plugin used to execute unit tests -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-surefire-plugin</artifactId>
					<version>${version.surefire-failsafe}</version>
					<configuration>
						<forkCount>1</forkCount>
						<redirectTestOutputToFile>true</redirectTestOutputToFile>
						<rerunFailingTestsCount>3</rerunFailingTestsCount>
						<argLine>-Xms512m -Xmx2048m</argLine>
					</configuration>
				</plugin>

				<!-- this is needed to run integration tests -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-failsafe-plugin</artifactId>
					<version>${version.surefire-failsafe}</version>
					<configuration>
						<forkCount>1</forkCount>
						<redirectTestOutputToFile>true</redirectTestOutputToFile>
						<rerunFailingTestsCount>3</rerunFailingTestsCount>
						<argLine>-Xms512m -Xmx4096m</argLine>
					</configuration>
					<executions>
						<execution>
							<goals>
								<goal>integration-test</goal>
								<goal>verify</goal>
							</goals>
						</execution>
					</executions>
				</plugin>

				<plugin>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-maven-plugin</artifactId>
					<version>${version.springboot}</version>
					<configuration>
						<finalName>user-collections</finalName>
					</configuration>
				</plugin>


				<plugin>
					<groupId>org.jacoco</groupId>
					<artifactId>jacoco-maven-plugin</artifactId>
					<version>${version.jacoco}</version>
					<executions>
						<execution>
							<id>default-prepare-agent</id>
							<goals>
								<goal>prepare-agent</goal>
							</goals>
						</execution>
						<execution>
							<id>default-report</id>
							<phase>prepare-package</phase>
							<goals>
								<goal>report</goal>
							</goals>
						</execution>
						<execution>
							<id>default-prepare-agent-integration</id>
							<phase>package</phase>
							<goals>
								<goal>prepare-agent-integration</goal>
							</goals>
						</execution>
						<execution>
							<id>default-report-integration</id>
							<goals>
								<goal>report-integration</goal>
							</goals>
						</execution>
					</executions>
				</plugin>

				<plugin>
					<!-- For manual handling of generated resources -->
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>build-helper-maven-plugin</artifactId>
					<version>3.0.0</version>
				</plugin>


				<plugin>
					<!-- Need to create self-executable uber/fat jars -->
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-maven-plugin</artifactId>
					<version>${version.springboot}</version>
					<executions>
						<execution>
							<goals>
								<goal>repackage</goal>
							</goals>
						</execution>
					</executions>
				</plugin>


				<plugin>
					<!--  To execute external commands, like YARN -->
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>exec-maven-plugin</artifactId>
					<version>1.6.0</version>
				</plugin>


			</plugins>

		</pluginManagement>
	</build>


</project>
